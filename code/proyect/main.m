%-----------------%
%  MAIN structure %
%-----------------%
%---------------------------%
%   dat2mat                 %
%   loading_training_data   %
%   loading_testing_data    %
%   selecting_data          %
%   filtering               %
%   network_struct          %
%   training_network        %
%   evaluating_network      %
%---------------------------%

%%
%-----------------------------------------------------------------------------------------------%
%                                           dat2mat                                             %
%-----------------------------------------------------------------------------------------------%

XTrain=single(zeros(1,5000,12,21837));
for j=0:1000:21000
    cnt=j;
    if j==0
        cnt=1;
    end
    archive=sprintf('%05d',j);
    root_path=['D:\tfg\codigo\database\ptb-xl\1.0.1\records500\' archive];
    cd(root_path);
    if j==21000
        for i=cnt:21837
            idx=sprintf('%05d',i);
            end_name='_hr';
%   Solo hay que hacer esto una vez            
%           filename=[idx end_name];
%           Solo hay que hacer esto una vez
%           wfdb2mat([root_path '\' filename]);
            end_mat='m.mat';
            matfile=strcat(idx,end_name,end_mat);
            load(strcat(root_path,"\",matfile));
%   Solo hay que hacer esto una vez
%           end_csv=".csv";
%           csvfile=strcat(idx,end_name,end_csv);
%           csvwrite(csvfile,val);
%   Automáticamente, la matriz de datos 12x5000 se llama 'val'
            for k=1:12
                XTrain(:,:,k,i)=val(k,:);
            end
        end
        break
    end
    for i=cnt:999+j
        idx=sprintf('%05d',i);
        end_name='_hr';
        %filename=[idx end_name];
        %wfdb2mat([root_path '\' filename]);
        end_mat='m.mat';
        matfile=strcat(idx,end_name,end_mat);
        load(strcat(root_path,"\",matfile));
%   Solo hay que hacer esto una vez
%       end_csv=".csv";
%       csvfile=strcat(idx,end_name,end_csv);
%       csvwrite(csvfile,val);
        for k=1:12
            XTrain(:,:,k,i)=val(k,:);
        end
    end
end
clear archive cnt end_mat end_name filename i idx j k matfile root_path val

%%
%-----------------------------------------------------------------------------------------------%
%                                      loading_training_data                                    %
%-----------------------------------------------------------------------------------------------%

% Import data from text file
% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 28);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["ecg_id", "patient_id", "age", "sex", "height", "weight", "nurse", "site", "device", "recording_date", "report", "scp_codes", "heart_axis", "infarction_stadium1", "infarction_stadium2", "validated_by", "second_opinion", "initial_autogenerated_report", "validated_by_human", "baseline_drift", "static_noise", "burst_noise", "electrodes_problems", "extra_beats", "pacemaker", "strat_fold", "filename_lr", "filename_hr"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "datetime", "categorical", "string", "categorical", "categorical", "double", "double", "categorical", "categorical", "categorical", "string", "categorical", "double", "string", "double", "string", "double", "string", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["scp_codes", "baseline_drift", "electrodes_problems", "pacemaker", "filename_lr", "filename_hr"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["report", "scp_codes", "heart_axis", "infarction_stadium1", "second_opinion", "initial_autogenerated_report", "validated_by_human", "baseline_drift", "static_noise", "electrodes_problems", "pacemaker", "filename_lr", "filename_hr"], "EmptyFieldRule", "auto");
opts = setvaropts(opts, "recording_date", "InputFormat", "yyyy-MM-dd HH:mm:ss");
opts = setvaropts(opts, ["device", "infarction_stadium2", "burst_noise", "extra_beats"], "TrimNonNumeric", true);
opts = setvaropts(opts, ["device", "infarction_stadium2", "burst_noise", "extra_beats"], "ThousandsSeparator", ",");

% Import the data
ptbxldatabase = readtable("D:\tfg\codigo\ptbxl_database.csv", opts);
% Clear temporary variables
clear opts

%-----------------------------------normal_ecgs_training----------------------------------%

norm_ecgs_data=string(zeros(9528,3));
cont=1;
for i=1:21837
    if contains(ptbxldatabase{i,12},"'NORM': 100")
        norm_ecgs_data(cont,1)=ptbxldatabase{i,12};
        norm_ecgs_data(cont,2)=num2str(ptbxldatabase{i,1});
        norm_ecgs_data(cont,3)=num2str(ptbxldatabase{i,2});
        cont=cont+1;
    end
end
norm_ecgs=zeros(cont-1,1);
for i=1:cont-1
    norm_ecgs(i,1)=str2double(norm_ecgs_data(i,2));
end
clear  i cont

%--------------------------------ami_ecgs_training----------------------------------------%

mi_ecgs_data=string(zeros(5486,3));
cont=1;
for i=1:21837
    case1=contains(ptbxldatabase{i,12},"'ASMI': 100");
    case2=contains(ptbxldatabase{i,12},"'AMI': 100");
    case3=contains(ptbxldatabase{i,12},"'ALMI': 100");
    case4=contains(ptbxldatabase{i,12},"'INJAS': 100");
    case5=contains(ptbxldatabase{i,12},"'INJAL': 100");
    case6=contains(ptbxldatabase{i,12},"'INJLA': 100");
    case7=contains(ptbxldatabase{i,12},"'IMI': 100");
    case8=contains(ptbxldatabase{i,12},"'ILMI': 100");
    case9=contains(ptbxldatabase{i,12},"'IPLMI': 100");
    case10=contains(ptbxldatabase{i,12},"'IPMI': 100");
    case11=contains(ptbxldatabase{i,12},"'INJIN': 100");
    case12=contains(ptbxldatabase{i,12},"'INJIL': 100");
    case13=contains(ptbxldatabase{i,12},"'LMI': 100");
    case14=contains(ptbxldatabase{i,12},"'PMI': 100");
    if case1||case2||case3||case4||case5||case6...
            ||case7...
            ||case8||case9||case10||case11||case12||case13||case14
        mi_ecgs_data(cont,1)=ptbxldatabase{i,12};
        mi_ecgs_data(cont,2)=num2str(ptbxldatabase{i,1});
        mi_ecgs_data(cont,3)=num2str(ptbxldatabase{i,2});
        cont=cont+1;
    end
end
mi_ecgs=zeros(cont-1,1);
for i=1:cont-1
    mi_ecgs(i,1)=str2double(mi_ecgs_data(i,2));
end
clear i cont case1 case2 case3 case4 case5 case6 case7...
    case8 case9 case10 case11 case12 case13 case14
clear ptbxldatabase
% Here, we preallocate the data array
XT=single(zeros(1,5000,12,10169));
YT=categorical(zeros(10169,1));
for i=1:7185
    % Here, we select the index 'idx' from the samples labeled as NAMI
    idx=norm_ecgs(i);
    % Here, we load the 'idx' sample of the XTrain array
    % into the XT array in the position nº 'i'
    XT(:,:,:,i)=XTrain(:,:,:,idx);
    % Here, we prepare the labels 
    YT(i)='0';
end
for i=1:2984
    % Here, we select the index 'idx' from the samples labeled as AMI
    idx=mi_ecgs(i);
    % Here, we load the 'idx' sample of the XTrain array
    % into the XT array in the position nº 'i+7185'
    XT(:,:,:,i+7185)=XTrain(:,:,:,idx);
    % Here, we prepare the labels 
    YT(i+7185)='1';
end
clear i idx mi_ecgs mi_ecgs_data norm_ecgs norm_ecgs_data XTrain order

%%
%-----------------------------------------------------------------------------------------------%
%                                      loading_testing_data                                     %
%-----------------------------------------------------------------------------------------------%

opts = spreadsheetImportOptions("NumVariables", 16);
% Specify sheet and range
opts.Sheet = "Sheet1";
opts.DataRange = "A2:P10647";
% Specify column names and types
opts.VariableNames = ["FileName", "Rhythm", "Beat", "PatientAge", "Gender", "VentricularRate", "AtrialRate", "QRSDuration", "QTInterval", "QTCorrected", "RAxis", "TAxis", "QRSCount", "QOnset", "QOffset", "TOffset"];
opts.VariableTypes = ["string", "string", "string", "string", "categorical", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];
% Specify variable properties
opts = setvaropts(opts, ["FileName", "PatientAge"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["FileName", "Rhythm", "Beat", "PatientAge", "Gender"], "EmptyFieldRule", "auto");
% Import the data
Diagnostics = readtable("D:\tfg\codigo\Diagnostics.xlsx", opts, "UseExcel", false);
clear opts

%--------------------------------------norm_ecgs_eval---------------------------------%

cont=1;
for i=1:10646
    if contains(Diagnostics{i,3},"NONE")
        norm_ecgs_val(cont,1)=Diagnostics{i,3}; %#ok<SAGROW> 
        norm_ecgs_val(cont,2)=Diagnostics{i,1}; %#ok<SAGROW> 
        norm_ecgs_val(cont,3)=Diagnostics{i,2}; %#ok<SAGROW> 
        cont=cont+1;
    end
end
clear cont i

%----------------------------------------ami_ecgs_eval--------------------------------%

cont=1;
for i=1:10646
    case1=contains(Diagnostics{i,3},"MI");
    case2=contains(Diagnostics{i,3},"MIBW");
    case3=contains(Diagnostics{i,3},"MIFW");
    case4=contains(Diagnostics{i,3},"MILW");
    case5=contains(Diagnostics{i,3},"MISW");
    if case1||case2||case3||case4||case5
        ami_ecgs_val(cont,1)=Diagnostics{i,3}; %#ok<SAGROW> 
        ami_ecgs_val(cont,2)=Diagnostics{i,1}; %#ok<SAGROW> 
        ami_ecgs_val(cont,3)=Diagnostics{i,2}; %#ok<SAGROW> 
        cont=cont+1;
    end
end
Xtest=zeros(1,5000,12,5419+41);
Ytest=categorical(zeros(5419+41,1));
cnt=1;
cd 'D:\tfg\codigo\ECGData'
for i=1:5419
    file=norm_ecgs_val{i,2}+".csv";
    matriz=readmatrix(file)';
    [~,len]=size(matriz);
    if len==5000
        Ytest(cnt)='0';
        for k=1:12
           Xtest(:,:,k,cnt)=matriz(k,:);
        end
        cnt=cnt+1;
    end
end
for i=1:41
    file=ami_ecgs_val{i,2}+".csv";
    matriz=readmatrix(file)';
    [~,len]=size(matriz);
    if len==5000
        Ytest(cnt)='1';
        for k=1:12
           Xtest(:,:,k,cnt)=matriz(k,:);
        end
        cnt=cnt+1;
    end
end
X_Dataset=XT;
Y_Dataset=YT;
X_Dataset(:,:,:,10169+1:10169+5460)=Xtest;
Y_Dataset(10169+1:10169+5460)=Ytest;
clear cont i case1 case2 case3 case4 case5 cnt i len file matriz norm_ecgs_val ami_ecgs_val Diagnostics

%-------------------------------------------split_data-------------------------------------------%

cd 'D:\tfg\codigo\proyect\final_version';
[X_Dataset,Y_Dataset,~] = shuffle_data(X_Dataset,Y_Dataset);
training_size=round(15629*0.7);
validation_size=round(15629*0.2);
testing_size=15629-training_size-validation_size;
Xt=X_Dataset(:,:,:,1:training_size);
Yt=Y_Dataset(1:training_size,:);
Xv=X_Dataset(:,:,:,training_size+1:training_size+validation_size);
Yv=Y_Dataset(training_size+1:training_size+validation_size,:);
Xtest=X_Dataset(:,:,:,training_size+validation_size+1:training_size+validation_size+testing_size);
Ytest=Y_Dataset(training_size+validation_size+1:training_size+validation_size+testing_size,:);
clear training_size validation_size testing_size X_Database Y_Database

%%
%-----------------------------------------------------------------------------------------------%
%                                           filtering                                           %
%-----------------------------------------------------------------------------------------------%

Fs=500; % [Hz]
[a1,b1,a2,b2]=createFilter(Fs);
%%
% Filtering Xt
Xt_filtered=single(zeros(size(Xt)));
for i=1:7118
    for j=1:12
        Xt_filtered(:,:,j,i)=ECGFilter(a1,b1,a2,b2,Xt,j,i);
    end
end
clear i j
%%
% Filtering Xv
Xv_filtered=single(zeros(size(Xv)));
for i=1:3051
    for j=1:12
        Xv_filtered(:,:,j,i)=ECGFilter(a1,b1,a2,b2,Xv,j,i);
    end
end
clear i j
%%
% Filtering Xtest
Xtest_filtered=single(zeros(size(Xtest)));
for i=1:1563
    for j=1:12
        Xtest_filtered(:,:,j,i)=ECGFilter(a1,b1,a2,b2,Xtest,j,i);
    end
end
clear i j a1 a2 b1 b2 Fs n

%%
%-----------------------------------------------------------------------------------------------%
%                                        network_struct                                         %
%-----------------------------------------------------------------------------------------------%

lgraph = layerGraph();
tempLayers = [
    imageInputLayer([1 5000 12],"Name","imageinput","Normalization","none")
    convolution2dLayer([1 256],32,"Name","conv_1","Padding",[0 0 3 3],"Stride",[1 2],"WeightsInitializer","he")
    batchNormalizationLayer("Name","batchnorm_1")
    reluLayer("Name","relu_1")
    maxPooling2dLayer([1 3],"Name","maxpool_1")
    convolution2dLayer([1 256],32,"Name","conv_2","Padding",[0 0 3 3],"Stride",[1 2],"WeightsInitializer","he")
    batchNormalizationLayer("Name","batchnorm_2")
    reluLayer("Name","relu_2")
    maxPooling2dLayer([1 3],"Name","maxpool_2")];
lgraph = addLayers(lgraph,tempLayers);

tempLayers = [
    batchNormalizationLayer("Name","batchnorm_4")
    reluLayer("Name","relu_3")
    convolution2dLayer([1 1],128,"Name","conv_4","WeightsInitializer","he")
    batchNormalizationLayer("Name","batchnorm_5")
    reluLayer("Name","relu_4")
    convolution2dLayer([1 3],128,"Name","conv_5","Padding",[0 0 1 1],"WeightsInitializer","he")];
lgraph = addLayers(lgraph,tempLayers);

tempLayers = [
    convolution2dLayer([1 1],128,"Name","conv_3","WeightsInitializer","he")
    batchNormalizationLayer("Name","batchnorm_3")];
lgraph = addLayers(lgraph,tempLayers);

tempLayers = depthConcatenationLayer(2,"Name","depthcat_1");
lgraph = addLayers(lgraph,tempLayers);

tempLayers = [
    batchNormalizationLayer("Name","batchnorm_6")
    reluLayer("Name","relu_5")
    convolution2dLayer([1 1],128,"Name","conv_6","WeightsInitializer","he")
    batchNormalizationLayer("Name","batchnorm_7")
    reluLayer("Name","relu_6")
    convolution2dLayer([1 3],128,"Name","conv_7","Padding",[0 0 1 1],"WeightsInitializer","he")];
lgraph = addLayers(lgraph,tempLayers);

tempLayers = [
    convolution2dLayer([1 1],128,"Name","conv_8","WeightsInitializer","he")
    batchNormalizationLayer("Name","batchnorm_8")];
lgraph = addLayers(lgraph,tempLayers);

tempLayers = [
    depthConcatenationLayer(2,"Name","depthcat")
    convolution2dLayer([1 128],128,"Name","conv_9","WeightsInitializer","he")
    batchNormalizationLayer("Name","batchnorm_10")
    reluLayer("Name","relu_7")
    maxPooling2dLayer([1 3],"Name","maxpool")];
lgraph = addLayers(lgraph,tempLayers);

tempLayers = [
    batchNormalizationLayer("Name","batchnorm_11")
    reluLayer("Name","relu_8")
    convolution2dLayer([1 1],128,"Name","conv_10","WeightsInitializer","he")
    batchNormalizationLayer("Name","batchnorm_12")
    reluLayer("Name","relu_9")
    convolution2dLayer([1 3],128,"Name","conv_11","Padding",[0 0 1 1],"WeightsInitializer","he")];
lgraph = addLayers(lgraph,tempLayers);

tempLayers = [
    convolution2dLayer([1 1],128,"Name","conv_12","WeightsInitializer","he")
    batchNormalizationLayer("Name","batchnorm_13")];
lgraph = addLayers(lgraph,tempLayers);

tempLayers = [
    depthConcatenationLayer(2,"Name","depthcat_2")
    batchNormalizationLayer("Name","batchnorm_9")
    globalAveragePooling2dLayer("Name","gapool")
    fullyConnectedLayer(2,"Name","fc","WeightsInitializer","he")
    softmaxLayer("Name","softmax")
    classificationLayer("Name","classoutput")];
lgraph = addLayers(lgraph,tempLayers);

% clean up helper variable
clear tempLayers;

lgraph = connectLayers(lgraph,"maxpool_2","batchnorm_4");
lgraph = connectLayers(lgraph,"maxpool_2","conv_3");
lgraph = connectLayers(lgraph,"batchnorm_3","depthcat_1/in2");
lgraph = connectLayers(lgraph,"conv_5","depthcat_1/in1");
lgraph = connectLayers(lgraph,"depthcat_1","batchnorm_6");
lgraph = connectLayers(lgraph,"depthcat_1","conv_8");
lgraph = connectLayers(lgraph,"batchnorm_8","depthcat/in2");
lgraph = connectLayers(lgraph,"conv_7","depthcat/in1");
lgraph = connectLayers(lgraph,"maxpool","batchnorm_11");
lgraph = connectLayers(lgraph,"maxpool","conv_12");
lgraph = connectLayers(lgraph,"batchnorm_13","depthcat_2/in2");
lgraph = connectLayers(lgraph,"conv_11","depthcat_2/in1");
%%
%-----------------------------------------------------------------------------------------------%
%                                     training_network                                          %
%-----------------------------------------------------------------------------------------------%

opt_sgdm = trainingOptions('sgdm','MaxEpochs',2,'InitialLearnRate',0.01,...
    'ExecutionEnvironment','gpu','Verbose',false,'LearnRateSchedule','piecewise',...
    'LearnRateDropFactor',0.001,'LearnRateDropPeriod',1,'ValidationPatience',3, ...
    'ValidationFrequency',6,'ValidationData',{Xv_filtered,Yv}, ...
    'Plots','training-progress','MiniBatchSize',96,'Momentum',0.99,'OutputNetwork','best-validation-loss');
    
%%

opt_rmsprop = trainingOptions('rmsprop','MaxEpochs',2,'InitialLearnRate',0.01,...
    'ExecutionEnvironment','gpu','Verbose',false,'LearnRateSchedule','piecewise',...
    'LearnRateDropFactor',0.001,'LearnRateDropPeriod',1,'ValidationPatience',3, ...
    'ValidationFrequency',6,'ValidationData',{Xv_filtered,Yv},'Plots','training-progress',...
    'MiniBatchSize',96,'OutputNetwork','best-validation-loss');

%%

opt_adam = trainingOptions('adam','MaxEpochs',1,'InitialLearnRate',0.01,...
    'ExecutionEnvironment','gpu','Verbose',false,'LearnRateSchedule','piecewise',...
    'LearnRateDropFactor',0.01,'LearnRateDropPeriod',1,'ValidationPatience',3, ...
    'ValidationFrequency',6,'ValidationData',{Xv_filtered,Yv},'Plots','training-progress',...
    'MiniBatchSize',96,'OutputNetwork','best-validation-loss');

%%
options=opt_adam;
net_av = trainNetwork(Xt_filtered,Yt,lgraph_av,options);
%%
%-----------------------------------------------------------------------------------------------%
%                                      evaluating_network                                       %
%-----------------------------------------------------------------------------------------------%

X=Xtest_filtered;
Y=Ytest;
[len,~]=size(Y);
YPred=categorical(zeros(len,1));
net=net_fv;
tic;
for i=1:len
    YPred(i)=classify(net,X(:,:,:,i),'ExecutionEnvironment','gpu');
end
toc;

%---------------------------------performance_metrics-------------------------------%

c_matrix = confusionmat(Y,YPred);
metrics.accuracy=sum(YPred==Y)/len;
metrics.precision=c_matrix(1,1)/(c_matrix(1,1)+c_matrix(1,2));
metrics.recall=c_matrix(2,2)/(c_matrix(2,2)+c_matrix(2,1));
metrics.specificity=c_matrix(1,1)/(c_matrix(1,1)+c_matrix(1,2));
metrics.negative_predictive_value=c_matrix(1,1)/(c_matrix(1,1)+c_matrix(2,1)); %(ME SIRVE PARA QUE, CUANDO UNA MUESTRA DE NEGATIVO, PUEDA ASEVERAR QUE REALMENTE LO ES)
metrics.positive_predictive_value=c_matrix(2,2)/(c_matrix(2,2)+c_matrix(1,2));
metrics.F1_score = 2*((metrics.recall)*(metrics.precision))/((metrics.recall)+(metrics.precision));
metrics %#ok<NOPTS> 
confusionchart(c_matrix)
%%
clear i len accuracy precission recall specificity negative_precission F1_score metrics

%%

%---------------------------exporting_net------------------------------%

filename='ecg_net';
exportONNXNetwork(net_fv,filename);